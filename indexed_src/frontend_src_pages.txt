=== frontend/src/pages/AuditorDashboard.jsx ===
import React from "react";
import { Box } from "@mui/material";

const AuditorDashboard = ({ context }) => (
  <Box display="flex" flexDirection="column" minHeight="100vh">
    <Box component="main" flexGrow={1} p={3}>
      <h2>
        Welcome, Auditor!
        {context && context.project && <> (Project: {context.project})</>}
        {context && context.cycle && <> (Cycle: {context.cycle})</>}
        {context && context.module && <> (Module: {context.module})</>}
      </h2>
      {/* ... */}
    </Box>
  </Box>
);

export default AuditorDashboard;

=== frontend/src/pages/Dashboard.jsx ===
// File: frontend/src/pages/Dashboard.jsx
// Purpose: Main dashboard. Selects context and renders role-specific dashboards.
// Location: frontend/src/pages/

import React, { useEffect, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { useNavigate } from "react-router-dom";
import AdminDashboard from "./AdminDashboard/AdminDashboard";
import DataOwnerDashboard from "./DataOwnerDashboard";
import AuditorDashboard from "./AuditorDashboard";
import { Box, CircularProgress, Typography, Alert, MenuItem, Select, FormControl, InputLabel } from "@mui/material";

/**
 * Main dashboard component.
 * Lets the user select a context and loads the appropriate dashboard based on their role.
 */
const Dashboard = () => {
  const { user } = useAuth();
  const token = user?.token;

  const [roles, setRoles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [contexts, setContexts] = useState([]);
  const [selectedContext, setSelectedContext] = useState("");
  const navigate = useNavigate();

  // Fetch user roles and available contexts on mount
  useEffect(() => {
    if (!token) {
      navigate("/login");
      return;
    }

    const fetchRoles = async () => {
      try {
        const response = await fetch("http://localhost:8000/api/my-roles/", {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (response.ok) {
          const data = await response.json();
          setRoles(data.roles || []);
          // Extract available contexts for selection
          const contextList = (data.roles || []).map((r, idx) => ({
            key: `${r.context_type}:${r.project || r.cycle || r.module || idx}`,
            label: `${r.context_type === "project" ? r.project : r.context_type === "cycle" ? r.cycle : r.module} (${r.role})`,
            ...r
          }));
          setContexts(contextList);
        } else {
          setError("Failed to fetch roles.");
        }
      } catch (err) {
        setError("Error fetching roles.");
      } finally {
        setLoading(false);
      }
    };

    fetchRoles();
  }, [token, navigate]);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh">
        <CircularProgress />
      </Box>
    );
  }
  if (error) {
    return <Alert severity="error">{error}</Alert>;
  }
  if (!roles.length) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh">
        <Typography variant="h5">No roles assigned to you.</Typography>
      </Box>
    );
  }

  return (
    <Box
      sx={{
        flex: 1,
        width: "100vw",
        maxWidth: "100vw",
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        px: 0,
        py: 0,
        minHeight: "100vh",
      }}
    >
      {/* Only show the context selector if no context is selected */}
      {!selectedContext && (
        <>
          <Typography variant="h5" gutterBottom>
            Select your context
          </Typography>
          <FormControl sx={{ minWidth: 300, mb: 3 }}>
            <InputLabel id="context-select-label">Context</InputLabel>
            <Select
              labelId="context-select-label"
              value={selectedContext}
              label="Context"
              onChange={e => setSelectedContext(e.target.value)}
            >
              {contexts.map(ctx => (
                <MenuItem key={ctx.key} value={ctx.key}>
                  {ctx.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </>
      )}
      {/* Show dashboard for the selected context */}
      {selectedContext && (() => {
        const ctx = contexts.find(c => c.key === selectedContext);
        if (!ctx) return null;
        if (ctx.role.includes("admin")) return <AdminDashboard context={ctx} />;
        if (ctx.role.includes("data_owner") || ctx.role.includes("data-owner")) return <DataOwnerDashboard context={ctx} />;
        if (ctx.role.includes("auditor")) return <AuditorDashboard context={ctx} />;
        return <Typography>No dashboard available for your role in this context.</Typography>;
      })()}
    </Box>
  );
};

export default Dashboard;

=== frontend/src/pages/DataOwnerDashboard.jsx ===
import React from "react";
import { Box } from "@mui/material";

const DataOwnerDashboard = ({ context }) => (
  <Box display="flex" flexDirection="column" minHeight="100vh">
    <Box component="main" flexGrow={1} p={3}>
      <h2>
        Welcome, Data Owner!
        {context && context.project && <> (Project: {context.project})</>}
        {context && context.cycle && <> (Cycle: {context.cycle})</>}
        {context && context.module && <> (Module: {context.module})</>}
      </h2>
      {/* ... */}
    </Box>
  </Box>
);

export default DataOwnerDashboard;

=== frontend/src/pages/Login.jsx ===
// File: frontend/src/pages/Login.jsx
// Purpose: Login page component for user authentication.
// Location: frontend/src/pages/

import React, { useState } from "react";
import { useAuth } from "../context/AuthContext";
import { useNavigate } from "react-router-dom";
import { jwtDecode } from "jwt-decode";
import {
  Box,
  Card,
  CardContent,
  Typography,
  TextField,
  Button,
  Alert,
  CircularProgress,
} from "@mui/material";

const LOGO_SRC = "/aast_carbon_logo_.jpg"; // logo image in public folder

/**
 * Login component.
 * Handles user sign-in, authentication, and error display.
 */
const Login = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const { login } = useAuth();
  const navigate = useNavigate();

  /**
   * Handles the login form submit.
   */
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setLoading(true);
    try {
      const response = await fetch("http://localhost:8000/api/token/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      });
      const data = await response.json();
      if (response.ok) {
        localStorage.setItem("access", data.access);
        localStorage.setItem("refresh", data.refresh);

        const decoded = jwtDecode(data.access);

        // Fetch roles after login
        const rolesResponse = await fetch("http://localhost:8000/api/my-roles/", {
          headers: { Authorization: `Bearer ${data.access}` },
        });
        const rolesData = await rolesResponse.json();

        login({
          username: decoded.username,
          token: data.access,
          refresh: data.refresh,
          roles: rolesData.roles || [],
        });

        navigate("/dashboard");
      } else {
        setError("Invalid username or password.");
      }
    } catch (err) {
      setError("Something went wrong. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box
      sx={{
        minHeight: "100vh",
        width: "100vw",
        bgcolor: "background.default",
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        px: 0,
        py: 0,
      }}
    >
      <Card sx={{ maxWidth: 380, width: "100%", p: 2 }}>
        <CardContent>
          <Box sx={{ display: "flex", flexDirection: "column", alignItems: "center", mb: 2 }}>
            <img
              src={LOGO_SRC}
              alt="AAST Carbon Logo"
              style={{ height: 60, marginBottom: 8 }}
            />
            <Typography variant="h5" fontWeight="bold" gutterBottom>
              Welcome to AAST Carbon Platform
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              Please sign in to continue.
            </Typography>
          </Box>
          <Box
            component="form"
            onSubmit={handleSubmit}
            sx={{ display: "flex", flexDirection: "column", gap: 2 }}
          >
            <TextField
              label="Username"
              value={username}
              onChange={e => setUsername(e.target.value)}
              required
              autoFocus
              fullWidth
            />
            <TextField
              label="Password"
              type="password"
              value={password}
              onChange={e => setPassword(e.target.value)}
              required
              fullWidth
            />
            {error && <Alert severity="error">{error}</Alert>}
            <Button
              variant="contained"
              type="submit"
              color="primary"
              disabled={loading}
              fullWidth
              size="large"
              sx={{ mt: 1 }}
            >
              {loading ? <CircularProgress size={24} /> : "Login"}
            </Button>
          </Box>
        </CardContent>
      </Card>
    </Box>
  );
};

export default Login;

=== frontend/src/pages/README.md ===
# pages

This folder contains all route-level (page) React components for the frontend app.

---

## üìÅ Structure

```
pages/
‚îú‚îÄ‚îÄ Login.jsx                     # Login screen (authentication)
‚îú‚îÄ‚îÄ Dashboard.jsx                 # Main dashboard (context selection, routing)
‚îú‚îÄ‚îÄ AdminDashboard/               # Admin dashboard and modules (see below)
‚îú‚îÄ‚îÄ AuditorDashboard.jsx          # Auditor's role dashboard
‚îú‚îÄ‚îÄ DataOwnerDashboard.jsx        # Data owner's role dashboard
‚îî‚îÄ‚îÄ ...                           # Add more pages as needed
```

---

## üó∫Ô∏è Main Pages

- **Login.jsx**  
  Handles user authentication and login form.
- **Dashboard.jsx**  
  Entry point after login. Lets user select a context (project, cycle, module) and loads the appropriate dashboard based on their assigned roles.
- **AdminDashboard/**  
  Contains the full admin dashboard with its own modules, sidebar, and internal routing.  
  See [`AdminDashboard/README.md`](./AdminDashboard/README.md) for details.
- **AuditorDashboard.jsx**  
  Dashboard for users with the "auditor" role.
- **DataOwnerDashboard.jsx**  
  Dashboard for users with the "data_owner" role.

---

## üìù Notes

- Routing and role-based protection are handled by the global `Router.jsx` (in `src/`).
- Each dashboard (Admin, Auditor, Data Owner) is modular and context-aware.
- Add new pages here for new app-level sections or roles.

---

**See [`AdminDashboard/README.md`](./AdminDashboard/README.md) for more on the administrator dashboard's structure.**



