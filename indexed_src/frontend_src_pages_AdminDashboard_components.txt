=== frontend/src/pages/AdminDashboard/components/ChartCard.jsx ===
// File: frontend/src/pages/AdminDashboard/components/ChartCard.jsx
// Purpose: Card component to render either a line or pie chart using recharts.
// Location: frontend/src/pages/AdminDashboard/components/

import React from "react";
import { Card, CardContent, Typography } from "@mui/material";
import {
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,
  PieChart, Pie, Cell, Legend
} from "recharts";

const COLORS = ["#388e3c", "#1976d2", "#ffa726", "#f44336", "#8e24aa"];

/**
 * ChartCard component.
 * Renders a line or pie chart with a title.
 *
 * @param {string} title - Chart title.
 * @param {"line"|"pie"} type - Type of chart to render.
 * @param {array} data - Data array for the chart.
 */
const ChartCard = ({ title, type, data }) => (
  <Card sx={{ height: 320, borderRadius: 3, boxShadow: 2 }}>
    <CardContent>
      <Typography variant="subtitle1" fontWeight={600} mb={2}>
        {title}
      </Typography>
      <ResponsiveContainer width="100%" height={240}>
        {type === "line" ? (
          <LineChart data={data}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="month" />
            <YAxis />
            <Tooltip />
            <Line
              type="monotone"
              dataKey="value"
              stroke="#388e3c"
              strokeWidth={3}
              dot={{ r: 4 }}
            />
          </LineChart>
        ) : (
          <PieChart>
            <Pie
              data={data}
              dataKey="value"
              nameKey="name"
              cx="50%"
              cy="50%"
              outerRadius={70}
              label
            >
              {data.map((entry, idx) => (
                <Cell key={`cell-${idx}`} fill={COLORS[idx % COLORS.length]} />
              ))}
            </Pie>
            <Tooltip />
            <Legend />
          </PieChart>
        )}
      </ResponsiveContainer>
    </CardContent>
  </Card>
);

export default ChartCard;

=== frontend/src/pages/AdminDashboard/components/README.md ===
# components

This folder contains all shared UI components for the admin dashboard.

---

## 📁 Structure

```
components/
├── Sidebar.jsx            # Responsive, collapsible sidebar navigation
├── SidebarHeader.jsx      # Sidebar header with project/cycle info
├── SidebarMenu.jsx        # Renders sidebar menu and sub-menus
├── menuConfig.js          # Sidebar menu configuration (labels, icons, submenus)
├── ChartCard.jsx          # Card for displaying line or pie charts (uses recharts)
├── StatCard.jsx           # Card for displaying a single statistic
├── Topbar.jsx             # Top navigation bar with dashboard title and sidebar toggle
└── ...                    # Add more admin widgets/components as needed
```

---

## 🏗️ Main Components

- **Sidebar.jsx**  
  Collapsible and pinnable navigation sidebar for the admin dashboard. Includes menu and project/cycle info.
- **SidebarHeader.jsx**  
  Displays the current project and cycle at the top of the sidebar.
- **SidebarMenu.jsx**  
  Renders the main sidebar menu and handles nested sub-menus. Uses the configuration in `menuConfig.js`.
- **menuConfig.js**  
  JavaScript object defining sidebar menu structure, labels, icons, and sub-menu items.
- **ChartCard.jsx**  
  Card component for rendering charts (`line` and `pie`) with [recharts](https://recharts.org/).
- **StatCard.jsx**  
  Card for displaying a single statistic (value, label, unit).
- **Topbar.jsx**  
  AppBar for the top of the dashboard, includes dashboard title and sidebar toggle for mobile.

---

## 📝 Usage

- These components are imported and composed in `AdminDashboard.jsx` and related dashboard/module files.
- They help maintain a **consistent, responsive admin dashboard UI**.
- You can extend the sidebar menu by editing `menuConfig.js`.

---

**For more details on how these components are used, see [`../AdminDashboard.jsx`](../AdminDashboard.jsx).**


=== frontend/src/pages/AdminDashboard/components/Sidebar.jsx ===
// File: frontend/src/pages/AdminDashboard/components/Sidebar.jsx
// Purpose: Responsive, collapsible sidebar navigation for the admin dashboard.
// Location: frontend/src/pages/AdminDashboard/components/

import React, { useState } from "react";
import { Drawer, Box, Tooltip, IconButton, Divider } from "@mui/material";
import ChevronLeftIcon from "@mui/icons-material/ChevronLeft";
import ChevronRightIcon from "@mui/icons-material/ChevronRight";
import PushPinIcon from "@mui/icons-material/PushPin";
import PushPinOutlinedIcon from "@mui/icons-material/PushPinOutlined";
import SidebarHeader from "./SidebarHeader";
import SidebarMenu from "./SidebarMenu";
import menuConfig from "./menuConfig";

const drawerWidth = 200;
const collapsedWidth = 56;
const headerHeight = 64;
const footerHeight = 48;
const sidebarFontSize = 14;
const sidebarIconSize = 20;

/**
 * Sidebar component.
 * Collapsible, pinnable sidebar with menu and project/cycle header.
 *
 * @param {boolean} open - Whether the sidebar is open (for mobile).
 * @param {function} onClose - Callback to close the sidebar (for mobile).
 * @param {string} currentProject - Project name to display in the header.
 * @param {string} currentCycle - Cycle name to display in the header.
 */
const Sidebar = ({
  open = true,
  onClose,
  currentProject = "Green HQ",
  currentCycle = "2024 Q2",
}) => {
  const [collapsed, setCollapsed] = useState(false);
  const [fixed, setFixed] = useState(true);
  const [expandedMenu, setExpandedMenu] = useState("");

  const handleCollapse = () => setCollapsed((prev) => !prev);
  const handleFix = () => setFixed((prev) => !prev);

  return (
    <Drawer
      variant={fixed ? "permanent" : "temporary"}
      open={fixed ? true : open}
      onClose={onClose}
      sx={{
        width: collapsed ? collapsedWidth : drawerWidth,
        flexShrink: 0,
        [`& .MuiDrawer-paper`]: {
          width: collapsed ? collapsedWidth : drawerWidth,
          boxSizing: "border-box",
          transition: "width 0.2s",
          overflowX: "hidden",
          background: "linear-gradient(135deg, #232526 0%, #414345 100%)",
          color: "#fff",
          borderRight: "none",
          minHeight: `calc(100vh - ${headerHeight}px - ${footerHeight}px)`,
          top: `${headerHeight}px`,
          height: `calc(100vh - ${headerHeight}px - ${footerHeight}px)`,
        },
        display: { xs: open ? "block" : "none", md: "block" },
        zIndex: 1201,
      }}
    >
      <SidebarHeader project={currentProject} cycle={currentCycle} />
      <Box
        sx={{
          display: "flex",
          alignItems: "center",
          justifyContent: collapsed ? "center" : "space-between",
          p: 1,
          height: 40,
        }}
      >
        {!collapsed && (
          <Box component="span" sx={{ fontWeight: 600, fontSize: 15 }}>
            Menu
          </Box>
        )}
        <Box>
          <Tooltip title={collapsed ? "Expand" : "Collapse"}>
            <IconButton
              onClick={handleCollapse}
              sx={{
                color: "inherit",
                mr: 1,
                p: 0.5,
              }}
              size="small"
            >
              {collapsed ? <ChevronRightIcon fontSize="small" /> : <ChevronLeftIcon fontSize="small" />}
            </IconButton>
          </Tooltip>
          <Tooltip title={fixed ? "Unpin" : "Pin"}>
            <IconButton
              onClick={handleFix}
              sx={{
                color: fixed ? "#4caf50" : "inherit",
                p: 0.5,
              }}
              size="small"
            >
              {fixed ? <PushPinIcon fontSize="small" /> : <PushPinOutlinedIcon fontSize="small" />}
            </IconButton>
          </Tooltip>
        </Box>
      </Box>
      <Divider sx={{ borderColor: "rgba(255,255,255,0.10)", mb: 1 }} />
      <SidebarMenu
        menuConfig={menuConfig}
        collapsed={collapsed}
        expandedMenu={expandedMenu}
        setExpandedMenu={setExpandedMenu}
        fontSize={sidebarFontSize}
        iconSize={sidebarIconSize}
      />
    </Drawer>
  );
};

export default Sidebar;

=== frontend/src/pages/AdminDashboard/components/SidebarHeader.jsx ===
// File: frontend/src/pages/AdminDashboard/components/SidebarHeader.jsx
// Purpose: Header for the sidebar, displaying project and cycle info.
// Location: frontend/src/pages/AdminDashboard/components/

import React from "react";
import { Box } from "@mui/material";
import InfoOutlinedIcon from "@mui/icons-material/InfoOutlined";

/**
 * SidebarHeader component.
 * Displays project and cycle information at the top of the sidebar.
 *
 * @param {string} project - Project name.
 * @param {string} cycle - Cycle name.
 */
const SidebarHeader = ({ project = "AAST Green Campus", cycle = "1 - 2025" }) => {
    return (
    <Box
        sx={{
        p: 1,
        pb: 0.5,
        pt: 1.2,
        display: 'flex',
        alignItems: 'center',
        borderBottom: '1px solid rgba(255,255,255,0.10)',
        mb: 1,
        minHeight: 48,
        }}
    >
        <InfoOutlinedIcon sx={{ color: "#aeea00", mr: 1 }} fontSize="small" />
        <Box>
        <Box sx={{ fontWeight: 700, fontSize: 15, color: '#fff', lineHeight: 1.2 }}>
            {project}
        </Box>
        <Box sx={{ fontSize: 12, color: '#bdbdbd', lineHeight: 1.2 }}>
            Cycle: {cycle}
        </Box>
        </Box>
    </Box>
    );
}

export default SidebarHeader;

=== frontend/src/pages/AdminDashboard/components/SidebarMenu.jsx ===
// File: frontend/src/pages/AdminDashboard/components/SidebarMenu.jsx
// Purpose: Renders the navigation menu for the sidebar, including nested submenus.
// Location: frontend/src/pages/AdminDashboard/components/

import React from "react";
import {
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Tooltip,
  Collapse,
  Divider,
} from "@mui/material";
import ExpandLessIcon from "@mui/icons-material/ExpandLess";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import { Link, useLocation } from "react-router-dom";

/**
 * SidebarMenu component.
 * Renders main and sub-menu items, supports collapse and tooltips.
 *
 * @param {Array} menuConfig - Array of menu configuration objects.
 * @param {boolean} collapsed - Whether sidebar is collapsed.
 * @param {string} expandedMenu - Which submenu is expanded.
 * @param {function} setExpandedMenu - Setter for expanded menu.
 * @param {number} fontSize - Font size for menu items.
 * @param {number} iconSize - Icon size for menu icons.
 */
const SidebarMenu = ({
  menuConfig,
  collapsed,
  expandedMenu,
  setExpandedMenu,
  fontSize = 14,
  iconSize = 20,
}) => {
  const location = useLocation();

  return (
    <List sx={{ py: 0 }}>
      {menuConfig.map((item, idx) => {
        const selected =
          item.path === "/admin"
            ? location.pathname === "/admin"
            : location.pathname.startsWith(item.path);

        // Has submenu
        if (item.subMenu) {
          const isOpen = expandedMenu === item.label;
          const IconComponent = item.icon;

          const mainMenuListItem = (
            <ListItemButton
              onClick={() => setExpandedMenu(isOpen ? "" : item.label)}
              selected={selected}
              sx={{
                justifyContent: collapsed ? "center" : "flex-start",
                px: collapsed ? 1 : 2,
                minHeight: 40,
                borderRadius: 2,
                my: 0.5,
                fontSize,
                "&.Mui-selected": {
                  background: "rgba(76, 175, 80, 0.18)",
                  color: "#4caf50",
                  "& .MuiListItemIcon-root": { color: "#4caf50" },
                },
                transition: "all 0.2s",
              }}
            >
              <ListItemIcon
                sx={{
                  minWidth: 0,
                  color: "inherit",
                  justifyContent: "center",
                  fontSize: iconSize,
                }}
              >
                <IconComponent fontSize="small" />
              </ListItemIcon>
              {!collapsed && (
                <>
                  <ListItemText
                    primary={item.label}
                    primaryTypographyProps={{
                      fontSize,
                      fontWeight: 500,
                    }}
                    sx={{ color: "inherit", ml: 1 }}
                  />
                  {isOpen ? (
                    <ExpandLessIcon fontSize="small" />
                  ) : (
                    <ExpandMoreIcon fontSize="small" />
                  )}
                </>
              )}
            </ListItemButton>
          );

          return (
            <React.Fragment key={item.label}>
              <ListItem disablePadding sx={{ display: "block" }}>
                {collapsed ? (
                  <Tooltip title={item.label} placement="right">
                    {mainMenuListItem}
                  </Tooltip>
                ) : (
                  mainMenuListItem
                )}
              </ListItem>
              <Collapse in={isOpen && !collapsed} timeout="auto" unmountOnExit>
                <List component="div" disablePadding>
                  {item.subMenu.map((subItem) => {
                    const subSelected = location.pathname === subItem.path;
                    const SubIconComponent = subItem.icon;
                    const subListItem = (
                      <ListItemButton
                        component={Link}
                        to={subItem.path}
                        selected={subSelected}
                        sx={{
                          pl: 5,
                          minHeight: 32,
                          borderRadius: 2,
                          my: 0.2,
                          fontSize: fontSize - 1,
                          "&.Mui-selected": {
                            background: "rgba(76, 175, 80, 0.12)",
                            color: "#4caf50",
                            "& .MuiListItemIcon-root": { color: "#4caf50" },
                          },
                          transition: "all 0.2s",
                        }}
                      >
                        <ListItemIcon
                          sx={{
                            minWidth: 0,
                            color: "inherit",
                            justifyContent: "center",
                            fontSize: iconSize - 2,
                          }}
                        >
                          <SubIconComponent fontSize="small" />
                        </ListItemIcon>
                        <ListItemText
                          primary={subItem.label}
                          primaryTypographyProps={{
                            fontSize: fontSize - 1,
                          }}
                          sx={{ color: "inherit", ml: 1 }}
                        />
                      </ListItemButton>
                    );
                    return (
                      <ListItem disablePadding key={subItem.label}>
                        {collapsed ? (
                          <Tooltip title={subItem.label} placement="right">
                            {subListItem}
                          </Tooltip>
                        ) : (
                          subListItem
                        )}
                      </ListItem>
                    );
                  })}
                </List>
              </Collapse>
              {idx === 4 || idx === 7 ? (
                <Divider sx={{ borderColor: "rgba(255,255,255,0.10)", my: 1 }} />
              ) : null}
            </React.Fragment>
          );
        }

        // Regular menu items
        const IconComponent = item.icon;
        const listItem = (
          <ListItemButton
            component={Link}
            to={item.path}
            selected={selected}
            sx={{
              justifyContent: collapsed ? "center" : "flex-start",
              px: collapsed ? 1 : 2,
              minHeight: 40,
              borderRadius: 2,
              my: 0.5,
              fontSize,
              "&.Mui-selected": {
                background: "rgba(76, 175, 80, 0.18)",
                color: "#4caf50",
                "& .MuiListItemIcon-root": { color: "#4caf50" },
              },
              transition: "all 0.2s",
            }}
          >
            <ListItemIcon
              sx={{
                minWidth: 0,
                color: "inherit",
                justifyContent: "center",
                fontSize: iconSize,
              }}
            >
              <IconComponent fontSize="small" />
            </ListItemIcon>
            {!collapsed && (
              <ListItemText
                primary={item.label}
                primaryTypographyProps={{ fontSize, fontWeight: 500 }}
                sx={{ color: "inherit", ml: 1 }}
              />
            )}
          </ListItemButton>
        );

        return (
          <React.Fragment key={item.label}>
            <ListItem disablePadding sx={{ display: "block" }}>
              {collapsed ? (
                <Tooltip title={item.label} placement="right">
                  {listItem}
                </Tooltip>
              ) : (
                listItem
              )}
            </ListItem>
            {item.label === "Gas" && (
              <Divider sx={{ borderColor: "rgba(255,255,255,0.10)", my: 1 }} />
            )}
          </React.Fragment>
        );
      })}
    </List>
  );
};

export default SidebarMenu;

=== frontend/src/pages/AdminDashboard/components/StatCard.jsx ===
// File: frontend/src/pages/AdminDashboard/components/StatCard.jsx
// Purpose: Card component to display a single statistical value and its label.
// Location: frontend/src/pages/AdminDashboard/components/

import React from "react";
import { Card, CardContent, Typography, Box } from "@mui/material";

/**
 * StatCard component.
 * Displays a summary statistic with an optional unit.
 *
 * @param {string} label - The label for the statistic.
 * @param {string|number} value - The statistic value.
 * @param {string} [unit] - Optional unit for the value.
 */
const StatCard = ({ label, value, unit }) => (
  <Card
    sx={{
      background: "linear-gradient(135deg, #e8f5e9 0%, #e3f2fd 100%)",
      boxShadow: 2,
      borderRadius: 3,
    }}
  >
    <CardContent>
      <Typography
        variant="subtitle2"
        color="text.secondary"
        sx={{ fontWeight: 500, mb: 1 }}
      >
        {label}
      </Typography>
      <Box sx={{ display: "flex", alignItems: "baseline" }}>
        <Typography
          variant="h5"
          sx={{ fontWeight: 700, mr: 1, fontSize: "2rem" }}
        >
          {value}
        </Typography>
        {unit && (
          <Typography color="text.secondary" sx={{ fontSize: "1rem" }}>
            {unit}
          </Typography>
        )}
      </Box>
    </CardContent>
  </Card>
);

export default StatCard;

=== frontend/src/pages/AdminDashboard/components/Topbar.jsx ===
// File: frontend/src/pages/AdminDashboard/components/Topbar.jsx
// Purpose: Top navigation bar for the admin dashboard, with title and menu toggle.
// Location: frontend/src/pages/AdminDashboard/components/

import React from "react";
import AppBar from "@mui/material/AppBar";
import Toolbar from "@mui/material/Toolbar";
import Typography from "@mui/material/Typography";
import IconButton from "@mui/material/IconButton";
import MenuIcon from "@mui/icons-material/Menu";

/**
 * Topbar component.
 * Renders an app bar with a title and optional sidebar toggle button.
 *
 * @param {string} title - Title to display in the app bar.
 * @param {function} drawerToggle - Callback for sidebar toggle (for mobile).
 */
const Topbar = ({ title = "Dashboard", drawerToggle }) => (
  <AppBar
    position="static"
    color="inherit"
    elevation={0}
    sx={{
      borderBottom: (theme) => `1px solid ${theme.palette.divider}`,
      zIndex: (theme) => theme.zIndex.drawer,
    }}
  >
    <Toolbar>
      {/* Sidebar toggle for mobile */}
      <IconButton
        color="inherit"
        edge="start"
        onClick={drawerToggle}
        sx={{ mr: 2, display: { md: "none" } }}
      >
        <MenuIcon />
      </IconButton>
      <Typography variant="h6" noWrap component="div">
        {title}
      </Typography>
    </Toolbar>
  </AppBar>
);

export default Topbar;

=== frontend/src/pages/AdminDashboard/components/menuConfig.js ===
import DashboardIcon from "@mui/icons-material/Dashboard";
import AssessmentIcon from "@mui/icons-material/Assessment";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import NotificationsIcon from "@mui/icons-material/Notifications";
import SettingsIcon from "@mui/icons-material/Settings";
import GroupIcon from "@mui/icons-material/Group";
import HelpOutlineIcon from "@mui/icons-material/HelpOutline";
import WaterDropIcon from "@mui/icons-material/WaterDrop";
import BoltIcon from "@mui/icons-material/Bolt";
import LocalGasStationIcon from "@mui/icons-material/LocalGasStation";
import OpacityIcon from "@mui/icons-material/Opacity";
import SpeedIcon from "@mui/icons-material/Speed";
import ReportProblemIcon from "@mui/icons-material/ReportProblem";
import WarningIcon from "@mui/icons-material/Warning";
import UploadFileIcon from "@mui/icons-material/UploadFile";

const menuConfig = [
  {
    label: "Dashboard",
    icon: DashboardIcon,
    path: "/admin",
  },
  {
    label: "Carbon Reporting",
    icon: AssessmentIcon,
    path: "/admin/reporting",
  },
  {
    label: "Data Items",
    icon: CloudUploadIcon,
    path: "/admin/data-items", // updated for consistency
  },
  {
    label: "Data Templates",
    icon: CloudUploadIcon,
    path: "/admin/templates", // updated for consistency
  },
  {
    label: "Notifications",
    icon: NotificationsIcon,
    path: "/admin/notifications",
  },
  {
    label: "Project Settings",
    icon: SettingsIcon,
    path: "/admin/project-settings",
  },
  {
    label: "Water",
    icon: WaterDropIcon,
    path: "/admin/water",
    subMenu: [
      { label: "Overview", icon: OpacityIcon, path: "/admin/water/overview" },
      { label: "Meter Readings", icon: SpeedIcon, path: "/admin/water/meters" },
      { label: "Import Data", icon: UploadFileIcon, path: "/admin/water/import" },
      { label: "Module Settings", icon: SettingsIcon, path: "/admin/water/settings" },
      { label: "Leak Detection", icon: ReportProblemIcon, path: "/admin/water/leaks" },
    ],
  },
  {
    label: "Electricity",
    icon: BoltIcon,
    path: "/admin/electricity",
    subMenu: [
      { label: "Analytics", icon: AssessmentIcon, path: "/admin/electricity/analytics" },
      { label: "Meter Readings", icon: SpeedIcon, path: "/admin/electricity/meters" },
      { label: "Import Data", icon: UploadFileIcon, path: "/admin/electricity/import" },
      { label: "Module Settings", icon: SettingsIcon, path: "/admin/electricity/settings" },
      { label: "Outage Reports", icon: WarningIcon, path: "/admin/electricity/outages" },
    ],
  },
  {
    label: "Gas",
    icon: LocalGasStationIcon,
    path: "/admin/gas",
    subMenu: [
      { label: "Trends", icon: AssessmentIcon, path: "/admin/gas/trends" },
      { label: "Meter Readings", icon: SpeedIcon, path: "/admin/gas/meters" },
      { label: "Import Data", icon: UploadFileIcon, path: "/admin/gas/import" },
      { label: "Module Settings", icon: SettingsIcon, path: "/admin/gas/settings" },
      { label: "Safety Alerts", icon: ReportProblemIcon, path: "/admin/gas/alerts" },
    ],
  },
  {
    label: "User Management",
    icon: GroupIcon,
    path: "/admin/users",
  },
  {
    label: "Help",
    icon: HelpOutlineIcon,
    path: "/admin/help",
  },
];

export default menuConfig;

