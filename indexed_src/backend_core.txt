=== backend/core/README.md ===
# core

This Django app contains the core domain models and APIs for Projects, Cycles, and Modules.

## Main Components

- **models.py**: Defines Project, Cycle, and Module models.
- **views.py**: API endpoints for managing projects (RBAC protected).
- **serializers.py**: DRF serializers for all models.
- **admin.py**: Admin site integration for all models.
- **urls.py**: API routing for all endpoints.
- **apps.py**: App configuration.

## API Overview

- `projects/`: CRUD for projects (RBAC-protected)
- (Extend with cycles and modules if needed in future)

## RBAC

Project endpoints are protected by the `HasRBACPermission` class.  
Users must have the `view_project` permission in the appropriate context.

## Testing

Add your tests in `core/tests.py`.

---

**Location:** `core/` (inside your Django project)

=== backend/core/__init__.py ===


=== backend/core/admin.py ===
from django.contrib import admin
from .models import (
    ReadingItemDefinition,
    ReadingTemplate,
    ReadingTemplateField,
    ReadingEntry,
    EvidenceFile,
)

@admin.register(ReadingItemDefinition)
class ReadingItemDefinitionAdmin(admin.ModelAdmin):
    list_display = ['name', 'data_type', 'required', 'editable', 'category']
    search_fields = ['name', 'category']

@admin.register(ReadingTemplate)
class ReadingTemplateAdmin(admin.ModelAdmin):
    list_display = ['name', 'version', 'status']
    search_fields = ['name']

@admin.register(ReadingTemplateField)
class ReadingTemplateFieldAdmin(admin.ModelAdmin):
    list_display = ['template', 'field', 'order']

@admin.register(ReadingEntry)
class ReadingEntryAdmin(admin.ModelAdmin):
    list_display = ['id', 'template', 'submitted_by', 'submitted_at', 'status']
    search_fields = ['template__name', 'submitted_by__username']

@admin.register(EvidenceFile)
class EvidenceFileAdmin(admin.ModelAdmin):
    list_display = ['reading_entry', 'reading_item', 'file_type', 'uploaded_at']

=== backend/core/apps.py ===
from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'


=== backend/core/models.py ===
# File: core/models.py
# Purpose: Defines the core domain models: Project, Cycle, and Module.

from django.db import models

class Project(models.Model):
    """
    Represents a project entity.
    """
    name = models.CharField(max_length=100)

    def __str__(self):
        """
        Returns the project's name.
        """
        return self.name

class Cycle(models.Model):
    """
    Represents a cycle within a project.
    """
    name = models.CharField(max_length=100)
    project = models.ForeignKey(Project, related_name='cycles', on_delete=models.CASCADE, null=True, blank=True)

    def __str__(self):
        """
        Returns the cycle's name and its associated project's name.
        """
        return f"{self.name} ({self.project.name})"

class Module(models.Model):
    """
    Represents a module within a project.
    """
    name = models.CharField(max_length=100)
    project = models.ForeignKey(Project, related_name='modules', on_delete=models.CASCADE, null=True, blank=True)

    def __str__(self):
        """
        Returns the module's name and its associated project's name.
        """
        return f"{self.name} ({self.project.name})"

=== backend/core/serializers.py ===
from rest_framework import serializers
from .models import (
    ReadingItemDefinition,
    ReadingTemplate,
    ReadingTemplateField,
    ReadingEntry,
    EvidenceFile,
)

class ReadingItemDefinitionSerializer(serializers.ModelSerializer):
    class Meta:
        model = ReadingItemDefinition
        fields = '__all__'

class ReadingTemplateFieldSerializer(serializers.ModelSerializer):
    class Meta:
        model = ReadingTemplateField
        fields = '__all__'

class ReadingTemplateSerializer(serializers.ModelSerializer):
    fields = ReadingItemDefinitionSerializer(many=True, read_only=True)
    class Meta:
        model = ReadingTemplate
        fields = '__all__'

class ReadingEntrySerializer(serializers.ModelSerializer):
    class Meta:
        model = ReadingEntry
        fields = '__all__'

class EvidenceFileSerializer(serializers.ModelSerializer):
    class Meta:
        model = EvidenceFile
        fields = '__all__'

=== backend/core/tests.py ===
# File: core/tests.py
# Purpose: Placeholder for automated tests for the core app.

from django.test import TestCase

# Create your tests here.

=== backend/core/urls.py ===
from rest_framework.routers import DefaultRouter
from .views import (
    ReadingItemDefinitionViewSet,
    ReadingTemplateViewSet,
    ReadingTemplateFieldViewSet,
    ReadingEntryViewSet,
    EvidenceFileViewSet,
)

router = DefaultRouter()
router.register(r'item-definitions', ReadingItemDefinitionViewSet)
router.register(r'templates', ReadingTemplateViewSet)
router.register(r'template-fields', ReadingTemplateFieldViewSet)
router.register(r'entries', ReadingEntryViewSet)
router.register(r'evidence-files', EvidenceFileViewSet)

urlpatterns = router.urls

=== backend/core/views.py ===
from rest_framework import viewsets
from .models import (
    ReadingItemDefinition,
    ReadingTemplate,
    ReadingTemplateField,
    ReadingEntry,
    EvidenceFile,
)
from .serializers import (
    ReadingItemDefinitionSerializer,
    ReadingTemplateSerializer,
    ReadingTemplateFieldSerializer,
    ReadingEntrySerializer,
    EvidenceFileSerializer,
)

class ReadingItemDefinitionViewSet(viewsets.ModelViewSet):
    queryset = ReadingItemDefinition.objects.all()
    serializer_class = ReadingItemDefinitionSerializer

class ReadingTemplateViewSet(viewsets.ModelViewSet):
    queryset = ReadingTemplate.objects.all()
    serializer_class = ReadingTemplateSerializer

class ReadingTemplateFieldViewSet(viewsets.ModelViewSet):
    queryset = ReadingTemplateField.objects.all()
    serializer_class = ReadingTemplateFieldSerializer

class ReadingEntryViewSet(viewsets.ModelViewSet):
    queryset = ReadingEntry.objects.all()
    serializer_class = ReadingEntrySerializer

class EvidenceFileViewSet(viewsets.ModelViewSet):
    queryset = EvidenceFile.objects.all()
    serializer_class = EvidenceFileSerializer

