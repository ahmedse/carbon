=== frontend/src/App.css ===
/* File: frontend/src/App.css
   Purpose: Component-specific styles for App and visual elements.
   Location: frontend/src/
*/

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

=== frontend/src/App.jsx ===
// File: frontend/src/App.jsx
// Purpose: Root React component, sets up theme, authentication, and routing.
// Location: frontend/src/

import React, { useState, useMemo, useEffect } from "react";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";
import Router from "./Router";
import { AuthProvider } from "./context/AuthContext";
import getDesignTokens from "./styles/theme";

/**
 * Determines the preferred color mode from the user's system.
 * @returns {'dark'|'light'}
 */
const getSystemMode = () =>
  window.matchMedia &&
  window.matchMedia("(prefers-color-scheme: dark)").matches
    ? "dark"
    : "light";

/**
 * Returns the user's theme mode preference from localStorage.
 * Defaults to 'system' if not set.
 */
const getStoredMode = () => localStorage.getItem("themeMode") || "system";

/**
 * Main app component. Handles global theme and authentication context.
 * Provides theme toggling and persists preference.
 */
const App = () => {
  const [mode, setMode] = useState(getStoredMode);
  const [systemMode, setSystemMode] = useState(getSystemMode());

  // Listen to system color scheme changes when in 'system' mode
  useEffect(() => {
    if (mode === "system") {
      const matcher = window.matchMedia("(prefers-color-scheme: dark)");
      const onChange = (e) => {
        const newSysMode = e.matches ? "dark" : "light";
        setSystemMode(newSysMode);
      };
      matcher.addEventListener("change", onChange);
      return () => matcher.removeEventListener("change", onChange);
    }
  }, [mode]);

  // Save user's mode preference
  useEffect(() => {
    localStorage.setItem("themeMode", mode);
  }, [mode]);

  const effectiveMode = mode === "system" ? systemMode : mode;

  // Memoize theme object for performance
  const theme = useMemo(
    () => createTheme(getDesignTokens(effectiveMode)),
    [effectiveMode]
  );

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <AuthProvider>
        <Router mode={mode} setMode={setMode} />
      </AuthProvider>
    </ThemeProvider>
  );
};

export default App;

=== frontend/src/README.md ===
# src

This folder contains the source code for the frontend React application.

---

## üìÅ Structure

```
src/
‚îú‚îÄ‚îÄ App.jsx                 # Root component: theme, authentication, routing
‚îú‚îÄ‚îÄ main.jsx                # Entry point: renders <App /> to the DOM
‚îú‚îÄ‚îÄ Router.jsx              # Application routes and route protection
‚îú‚îÄ‚îÄ index.css               # Global styles (fonts, colors, resets)
‚îú‚îÄ‚îÄ App.css                 # App and logo-specific styles
‚îú‚îÄ‚îÄ context/                # (If present) React context providers (e.g. Auth)
‚îú‚îÄ‚îÄ layouts/                # (If present) Layout components (wrappers, shells)
‚îú‚îÄ‚îÄ pages/                  # Route-level React components (see below)
‚îú‚îÄ‚îÄ styles/                 # (If present) Theme or utility style files
‚îî‚îÄ‚îÄ ...                     # Other feature-specific folders or files
```

---

## ‚öôÔ∏è Main Files

- **App.jsx**  
  Sets up the global theme (light/dark/system), authentication context, and application routing.
- **main.jsx**  
  The entry point. Mounts the React app inside the `#root` DOM element.
- **Router.jsx**  
  Defines all major application routes. Handles authentication and role-based route protection.
- **index.css & App.css**  
  Global and application-level CSS styles.

---

## üóÇÔ∏è Key Folders

- **context/**  
  Holds React Context Providers (e.g., for authentication, theme, settings).
- **layouts/**  
  Layout components for wrapping pages (e.g., MainLayout).
- **pages/**  
  All page-level components (Login, Dashboard, AdminDashboard, etc).  
  See [`pages/README.md`](./pages/README.md) for more.
- **styles/**  
  (Optional) Custom MUI themes, design tokens, or shared style modules.

---

## üìù Notes

- All application logic, UI, and routing starts from this folder.
- For static assets (images, logos), use the `public/` directory at the frontend root.

---

**See [`pages/README.md`](./pages/README.md) for documentation on the app's page-level routes and structure.**


=== frontend/src/Router.jsx ===
// File: frontend/src/Router.jsx
// Purpose: Application router, handles route protection and layout structure.
// Location: frontend/src/

import React from "react";
import { BrowserRouter, Routes, Route, Navigate, Outlet } from "react-router-dom";
import MainLayout from "./layouts/MainLayout";
import Login from "./pages/Login";
import Dashboard from "./pages/Dashboard";
import AdminDashboard from "./pages/AdminDashboard/AdminDashboard";
import AuditorDashboard from "./pages/AuditorDashboard";
import DataOwnerDashboard from "./pages/DataOwnerDashboard";
import { useAuth } from "./context/AuthContext";

/**
 * Protects routes based on authenticated user and allowed roles.
 * Redirects to login if not authenticated or not authorized.
 */
const ProtectedRoute = ({ allowedRoles, children }) => {
  const { user } = useAuth();
  if (!user) return <Navigate to="/login" replace />;
  if (allowedRoles) {
    const allRoles = (user.roles || []).map(r => r.role);
    if (!allRoles.some(r => allowedRoles.includes(r))) {
      return <Navigate to="/login" replace />;
    }
  }
  return children;
};

/**
 * Layout wrapper for routes, passing theme mode controls.
 */
const LayoutRoute = ({ mode, setMode }) => (
  <MainLayout mode={mode} setMode={setMode}>
    <Outlet />
  </MainLayout>
);

/**
 * Root router configuration.
 */
const Router = ({ mode, setMode }) => (
  <BrowserRouter>
    <Routes>
      <Route path="/" element={<Navigate to="/login" replace />} />
      <Route path="/login" element={<Login />} />
      <Route
        element={
          <ProtectedRoute>
            <LayoutRoute mode={mode} setMode={setMode} />
          </ProtectedRoute>
        }
      >
        <Route path="/dashboard" element={<Dashboard />} />
        <Route
          path="/admin/*"
          element={
            <ProtectedRoute allowedRoles={["admin_role"]}>
              <AdminDashboard />
            </ProtectedRoute>
          }
        />
        <Route
          path="/auditor/*"
          element={
            <ProtectedRoute allowedRoles={["auditor"]}>
              <AuditorDashboard />
            </ProtectedRoute>
          }
        />
        <Route
          path="/data-owner/*"
          element={
            <ProtectedRoute allowedRoles={["data_owner", "data-owner"]}>
              <DataOwnerDashboard />
            </ProtectedRoute>
          }
        />
      </Route>
      <Route path="*" element={<Navigate to="/login" replace />} />
    </Routes>
  </BrowserRouter>
);

export default Router;

=== frontend/src/index.css ===
/* File: frontend/src/index.css
   Purpose: Global CSS for the application, including color schemes and base styles.
   Location: frontend/src/
*/

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

=== frontend/src/main.jsx ===
// File: frontend/src/main.jsx
// Purpose: Application entry point; renders the root App component to the DOM.
// Location: frontend/src/

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

// Mount the root React component to the DOM
createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

