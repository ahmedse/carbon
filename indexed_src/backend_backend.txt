=== backend/backend/README.md ===
# Backend

This folder contains the Django backend for the project.

## Structure

- **backend/**  
  Main project folder containing configuration and project-level files.
  - **settings.py**: Global Django settings, including installed apps, middleware, authentication, database, etc.
  - **urls.py**: Root URL routing for the project, includes routes for admin and app APIs.
  - **\_\_init\_\_.py**: Python package marker.
- **manage.py**  
  Command-line utility for running and managing the Django project.

## Getting Started

1. **Install dependencies**  
```bash
   pip install -r requirements.txt
```

2. **Set up environment variables**  
Create a .env file in the backend/ directory with required entries:
```ini
DEBUG=True
ALLOWED_HOSTS=127.0.0.1,localhost
DB_NAME=your_db_name
DB_USER=your_db_user
DB_PASSWORD=your_db_password
DB_HOST=localhost
DB_PORT=5433
```

3. **Apply migrations** 
```bash
python manage.py migrate
```

4. **Run the development server** 
```bash
python manage.py runserver
```

**Notes**

All app-specific URLs are included under /api/ and /api/core/.
The project uses environment variables for sensitive settings.
Logging is configured to output DEBUG level logs to the console.

**Project Tree**
```
backend/
├── backend/
│   ├── __init__.py
│   ├── settings.py
│   └── urls.py
├── manage.py
└── ...
````

=== backend/backend/__init__.py ===


=== backend/backend/asgi.py ===
"""
ASGI config for backend project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')

application = get_asgi_application()


=== backend/backend/settings.py ===
# File: backend/backend/settings.py
# Purpose: Django project settings for the 'backend' project.
#
# This file contains configuration for Django settings, including installed apps,
# middleware, database, authentication, static files, internationalization,
# logging, and other global options.
#
# For more information, see:
# https://docs.djangoproject.com/en/5.2/topics/settings/

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9(mkyr(v_!gbmxt+kb(1z)a=l7vp(g(q4ocn^mo_0k#y_$!!v9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() == "true"
print("DEBUG is set to:", DEBUG)

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',    
    # Project-specific apps
    'accounts',
    'core',
    'corsheaders',
]

AUTH_USER_MODEL = 'accounts.User'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv("DB_NAME"),
        'USER': os.getenv("DB_USER"),
        'PASSWORD': os.getenv("DB_PASSWORD"),
        'HOST': os.getenv("DB_HOST", "localhost"),
        'PORT': os.getenv("DB_PORT", "5433"),
    }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
    },
    "root": {
        "handlers": ["console"],
        "level": os.getenv("ROOT_LOG_LEVEL", "WARNING"),  # Default: WARNING
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),  # Default: DEBUG
            "propagate": True,
        },
        "rest_framework": {
            "handlers": ["console"],
            "level": os.getenv("REST_FRAMEWORK_LOG_LEVEL", "DEBUG"),  # Default: DEBUG
            "propagate": False,
        },
    },
}

=== backend/backend/urls.py ===
# File: backend/backend/urls.py
# Purpose: Main URL configuration for the 'backend' Django project.
#
# This file defines the list of URL patterns that route HTTP requests
# to the appropriate Django views or applications.

from django.contrib import admin
from django.urls import path, include

# urlpatterns: List of URL patterns that route to views or included URL configs.
urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('accounts.urls')),     # Routes API requests to the accounts app
    path('api/core/', include('core.urls')),    # Routes API requests to the core app
]

=== backend/backend/wsgi.py ===
"""
WSGI config for backend project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')

application = get_wsgi_application()


