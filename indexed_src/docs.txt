=== docs/api.md ===
# API Reference ‚Äî Carbon Management Platform

This document lists the main API endpoints, request/response structures, and example queries.

## 1. Authentication

- `POST /api/token/`
- `POST /api/token/refresh/`

## 2. Users & Roles

- `GET /api/users/`
- `GET /api/role-assignments/`
- ...

## 3. Projects, Periods, Modules

- `GET /api/projects/`
- `GET /api/periods/`
- `GET /api/modules/`
- ...

## 4. Module Data

- `POST /api/module-data/`
- `GET /api/module-data/`
- ...

## 5. Calculations

- `POST /api/calculation-results/`
- `GET /api/calculation-results/`
- ...

## 6. Example Workflows

- Example: Creating a project, adding periods, assigning roles, entering data, triggering calculation.

---

*Document each endpoint as you implement it. Add OpenAPI/Swagger as needed!*

=== docs/data-model.md ===
# Data Model & Entity Relationships

## 1. Entity-Relationship Diagram

_See [diagrams/entity-relationship.mmd](./diagrams/entity-relationship.mmd) for the Mermaid source._

## 2. Main Entities

- User
- Role
- Project
- Period/Cycle
- Module
- ModuleData
- CalculationResult
- Context
- RoleAssignment

## 3. Field Definitions

_Document main fields and relationships. Add diagrams or tables as needed._

---

*Update as your data model evolves!*

=== docs/debug.md ===
# Debugging & Troubleshooting Guide

This file documents common errors, debugging tips, and support commands for the Carbon Management Platform.

---

## 1. Backend

### Common Commands

- Start shell:  
  `python manage.py shell`

- List users:  
  ```python
  from accounts.models import User
  User.objects.all()

Test JWT:
```bash
curl -X POST http://localhost:8000/api/token/ \
  -H "Content-Type: application/json" \
  -d '{"username":"admin1","password":"your-password"}'
```

Common Issues
Database connection errors:

Check settings.py DB config and that PostgreSQL is running.
Migrations:

Run: python manage.py makemigrations && python manage.py migrate
2. Frontend
Dev server not starting:

Check Node.js version, run npm install, then npm run dev
Console errors:

Use browser DevTools, check API URLs in .env
3. Docker
Backend/DB not starting:

Run docker-compose logs backend or docker-compose logs db
Check port conflicts.
To restart everything:

```bash
docker-compose down
docker-compose up --build
```

=== docs/deployment.md ===
# Deployment Guide ‚Äî Carbon Management Platform

Instructions for deploying the platform to production/staging environments.

---

## 1. Prerequisites

- Ubuntu server with Docker & Docker Compose
- Domain name (for production)
- NGINX (as reverse proxy)
- SSL certificates (Let's Encrypt recommended)

---

## 2. Steps

1. Clone the repository to `/opt/carbon`
2. Edit the `.env` file with production credentials
3. Configure PostgreSQL (see [install.md](../install.md))
4. Start services:
    ```bash
    docker-compose up -d --build
    ```
5. Run migrations and create superuser:
    ```bash
    docker-compose exec backend python manage.py migrate
    docker-compose exec backend python manage.py createsuperuser
    ```
6. Configure NGINX (see sample config in this file)
7. Set up SSL

---

## 3. NGINX Sample Config

```nginx
server {
    listen 80;
    server_name your-domain.com;

    location / {
        proxy_pass http://localhost:5173;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    location /api/ {
        proxy_pass http://localhost:8000/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
```

## 3. Security
Ensure ports 5173 and 8000 are not exposed to the public.
Use strong passwords and secrets.
Regularly back up your database.

=== docs/design.md ===
# Design Document ‚Äî Carbon Management Platform

## 1. Overview

The Carbon Management Platform enables organizations to capture, analyze, and report environmental data (carbon, water, electricity, etc.) across projects and reporting cycles.  
It is designed for flexibility, strong RBAC, auditability, and future-proof scaling.

---

## 2. Architecture Overview

**Baseline Tech Stack:**
- Frontend: React (Vite) + Material UI
- Backend: Django + DRF + JWT
- Database: PostgreSQL (MVP), MongoDB (future option)
- Containerization: Docker, Compose
- DevOps: CI/CD, NGINX (prod), Prometheus/Grafana (future)

**Key Concepts:**
- Projects, Cycles (Periods), Modules, ModuleData
- Context-aware RBAC (Role assignments per project/cycle/module)
- Calculation/Reporting
- Audit Logging

**High-Level Diagram:**  
_See: `diagrams/system-architecture.mmd`_

---

## 3. Data Model

- **User:** Identity, roles, and assignments
- **Role:** Permissions list (add_data, calculate, etc.)
- **Project:** Organization‚Äôs reporting context
- **Cycle:** Time window (year/quarter), non-overlapping
- **Module:** Data category (Water, Electricity, Vehicles, etc.)
- **ModuleData:** Data point per module/cycle/project
- **CalculationResult:** Output of carbon calculations
- **Context:** Scope for RBAC (global/project/cycle/module)
- **RoleAssignment:** User/role/context mapping

**ER Diagram:**  
_See: `diagrams/entity-relationship.mmd`_

---

## 4. Core Workflows

### 4.1. Admin Flow

- Create project and cycles  
- Define modules  
- Assign roles per context (e.g. Data Owner for Water 2024)  
- Configure initial data

**Diagram:** `diagrams/workflow-admin-project-setup.mmd`

### 4.2. Data Owner Flow

- Select assigned context (project/cycle/module)
- Enter or upload data (form or CSV)
- Review/edit before submission

**Diagram:** `diagrams/workflow-data-entry.mmd`

### 4.3. Auditor Flow

- Review submitted data
- Trigger calculation
- Review calculation results, generate reports

**Diagram:** `diagrams/workflow-auditor-review.mmd`

### 4.4. RBAC Enforcement (all roles)

- All actions checked against context-aware permissions.
- UI and API both enforce.

**RBAC Diagram:** `diagrams/rbac-enforcement.mmd`

---

## 5. API & Integration Outline

- RESTful endpoints for all entities.
- JWT authentication.  
- RBAC enforced at backend (custom permissions).
- Internationalization: API supports field translation (future).

---

## 6. Security & Audit

- Short-lived JWT for all user sessions.
- All sensitive actions logged (see AuditLog model).
- Data validation for all API endpoints.
- (Future) Consider append-only audit storage for compliance.

---

## 7. Extensibility & Future-Readiness

- **NoSQL/MongoDB:** For scaling flexible data, see `diagrams/nosql-data-model.mmd`
- **Multi-tenancy:** Add tenant field to all models; scope queries by tenant.
- **IoT Integration:** Plan APIs for real-time ingest (future).
- **Advanced Analytics:** Build on data model with BI/ML integration.
- **Bilingual/RTL Support:** React-i18next, modeltranslation (MVP: structure only).

---

## 8. Diagrams Index

- `diagrams/system-architecture.mmd` ‚Äî High-level system components
- `diagrams/entity-relationship.mmd` ‚Äî Data model/ERD
- `diagrams/workflow-admin-project-setup.mmd` ‚Äî Project/cycle/module setup
- `diagrams/workflow-data-entry.mmd` ‚Äî Data entry (owner)
- `diagrams/workflow-auditor-review.mmd` ‚Äî Data review/calculation (auditor)
- `diagrams/rbac-enforcement.mmd` ‚Äî RBAC enforcement
- `diagrams/nosql-data-model.mmd` ‚Äî NoSQL/MongoDB model (future)
- `diagrams/feature-roadmap-gantt.mmd` ‚Äî Roadmap timeline

---

## 9. Best Practices

- Always enforce RBAC both frontend and backend.
- Use migrations for all schema changes.
- Document all endpoints and workflows.
- Keep diagrams up to date as the system evolves.

---

*For implementation specifics, see backend and frontend README files.*

=== docs/env.md ===
---

## 3. `docs/env.md`

```markdown
# Environment Variables Reference

Document all environment variables used by the platform.

---

## Backend

| Variable        | Example Value        | Description                  |
|-----------------|---------------------|------------------------------|
| DB_NAME         | carbon              | PostgreSQL DB name           |
| DB_USER         | carbon_user         | PostgreSQL user              |
| DB_PASSWORD     | securepassword123   | PostgreSQL password          |
| DB_HOST         | localhost           | PostgreSQL host              |
| DB_PORT         | 5432                | PostgreSQL port              |
| DJANGO_SECRET_KEY | <your-secret>     | Django cryptographic secret  |
| ALLOWED_HOSTS   | localhost,127.0.0.1 | Allowed hosts for Django     |

## Frontend

| Variable        | Example Value        | Description                  |
|-----------------|---------------------|------------------------------|
| VITE_API_URL    | http://localhost:8000 | Backend API base URL        |

---

*Copy `.env.example` and edit as needed!*

=== docs/index.md ===
# Carbon Management Platform ‚Äî Documentation Index

Welcome to the documentation hub for the Carbon Management Platform.  
This folder contains all key design, architecture, and operational documents for the project.

---

## üìï Contents

- [Project Design & Overview](./design.md)
- [API Reference](./api.md)
- [Data Model & ER Diagrams](./data-model.md)
- [Workflows & Use Cases](./workflows.md)
- [Environment Variables](./env.md)
- [Debugging & Troubleshooting](./debug.md)
- [Deployment Guide](./deployment.md)
- [Project Roadmap & Gantt](./roadmap.md)
- [Diagrams (Mermaid, PNG)](./diagrams/)

---

## üö¶ For Developers

- See [install.md](../install.md) for setup instructions.
- See [progress.md](../progress.md) to track team progress.
- Use the links above for technical deep-dives.

---

## üìä For Analysts / Product Owners

- [Workflows & Use Cases](./workflows.md)
- [Roadmap](./roadmap.md)

---

## üóÇÔ∏è Diagrams

All architecture, data model, and workflow diagrams are in [diagrams/](./diagrams/), both as `.mmd` (Mermaid) and, optionally, as images.

---

## ü§ù Contributing

- If you update a document, please add a summary of your change at the top of the file with your name and date.
- For new features or changes, add/update relevant diagrams.

---

*For questions or suggestions, open an issue or contact the maintainers.*

=== docs/reading-templates.md ===

# Dynamic Data Collection & Configuration ‚Äî Full Design Document

## 1. Overview

This document details the architecture and workflows for a dynamic, admin-configurable data collection solution in the Carbon Management Platform. The design supports flexible "reading items" (data fields), template assignment by context (project, branch, department, etc.), dynamic validation (including measurement units), multi-evidence handling, RBAC, comprehensive reporting, full auditability, and extensibility for future integrations. This enables organizations to adapt quickly to operational and regulatory changes, while maintaining robust security and traceability [[3]](https://poe.com/citation?message_id=395415503247&citation=3).

---

## 2. Core Concepts & Data Model

### 2.1. Entities

- **ReadingItemDefinition**
  - Defines a data field (e.g., "Electricity Usage", "Water Meter Reading").
  - **Attributes:**  
    - `name`, `description`, `data type` (number, string, date, file, select),  
    - **default validation rules** (e.g., min/max, **units**),  
    - required/optional, category, tags, evidence rules, editable flag for admin override.
  - **Measurement Unit Handling:**  
    - The expected measurement unit for each data field (e.g., 'kWh' for electricity, 'm¬≥' for water) is explicitly set within the `validation rules` attribute (as a JSON property, e.g., `"unit": "kWh"`). This unit is enforced at data entry, referenced in analytics and reporting, and can be overridden per context if necessary [[2]](https://poe.com/citation?message_id=395415503247&citation=2)[[3]](https://poe.com/citation?message_id=395415503247&citation=3).
- **ReadingTemplate**
  - A form made up of ReadingItemDefinitions, assigned to specific contexts (module, project, branch, department).
  - **Attributes:** name, description, version, status, assigned contexts, fields (with order).
- **ReadingEntry**
  - A submission instance by a Data Owner, referencing a template and context (e.g., "March 2024 ‚Äî Branch X ‚Äî Electricity").
  - **Attributes:** template, template version, context, data (JSON), submitted_by, submitted_at, status (draft/submitted), audit log.
- **EvidenceFile**
  - An uploaded document/image related to an entry or field, possibly covering a range of readings.
  - **Attributes:** reading_entry, reading_item, file_path, file_type, uploaded_at, covers_period_start, covers_period_end.

### 2.2. Relationships (ERD)

```mermaid
erDiagram
    ReadingItemDefinition ||--o{ ReadingTemplate : "included in"
    ReadingTemplate ||--o{ ReadingEntry : "used by"
    ReadingEntry ||--o{ EvidenceFile : "has"
    ReadingTemplate }|..|{ Context : "assigned to"
    User ||--o{ ReadingEntry : "submits"
```

- Contexts include project, module, branch/location, department, and time period [[3]](https://poe.com/citation?message_id=395415503247&citation=3).

---

## 3. Workflows

### 3.1. Admin: Configure Data Collection

1. **Define Reading Items:** Admins define reading items for each module (e.g., electricity, water, gas), setting default validation (range, **units**, non-negative, etc.), which can be overridden per project/branch as needed. Units are a critical part of the validation rules for each data item and must be specified to ensure consistency and accuracy in data collection and reporting [[2]](https://poe.com/citation?message_id=395415503247&citation=2).
2. **Build Templates:** Group reading items into templates, assign to contexts (module + branch/location + department as appropriate). Common reading items can be reused or duplicated and customized, including their unit settings.
3. **Assign Staff:** For each context (e.g., Branch A of Project X), assign the Data Owner (staff who will enter data).
4. **Version Control:** All template changes are versioned for auditability.

```mermaid
flowchart TD
    A[Admin: Define Reading Items] --> B[Build Templates]
    B --> C[Assign to Contexts]
    C --> D[Assign Data Owners]
    D --> E[Version & Audit]
```

---

### 3.2. Data Owner: Data Entry

1. **Dashboard:** Data Owner sees assigned tasks (per time unit: month, quarter, etc.) for each context (e.g., their branch and module).
2. **Dynamic Form:** System renders a form based on the assigned template, with contextual fields and validation. The unit for each field is displayed and enforced based on its ReadingItemDefinition validation rules.
3. **Evidence Upload:** Where required, upload multiple evidence files (PDFs, images) and specify covered periods if a bill/document covers a range.
4. **Submit:** Save draft or submit; each submission is atomic for the time unit (e.g., monthly). Cannot edit past the deadline unless allowed.
5. **Alarms:** If a required submission is missing for a time unit, an alarm/notification is triggered.

```mermaid
flowchart TD
    D1[Data Owner: See Dashboard] --> D2[Open Data Entry Form]
    D2 --> D3[Fill Data/Upload Evidence]
    D3 --> D4[Validation]
    D4 --> D5[Submit or Save Draft]
```

---

### 3.3. Auditor: Review & Calculation

1. **View Submissions:** Auditor selects project/module/branch/period to review.
2. **Integrated Review:** Auditor sees submitted data and evidence in context, with all measurement units clearly displayed for each field, can approve, reject, or request resubmission.
3. **Calculation & Reporting:** Trigger calculations, view/store results, and generate reports. All calculations use the units specified in ReadingItemDefinition; if data needs to be aggregated or compared across units (e.g., liters to m¬≥), conversion logic must use the unit metadata [[2]](https://poe.com/citation?message_id=395415503247&citation=2)[[3]](https://poe.com/citation?message_id=395415503247&citation=3).
4. **Audit Log:** Actions are logged for traceability.

---

### 3.4. RBAC Enforcement

- All actions are strictly checked against context-aware RBAC at both UI and API levels.
- Only authorized admins can define templates; only assigned Data Owners can submit for their context; only auditors can review assigned scopes.

```mermaid
flowchart LR
    Admin-->|Define/Assign Templates|System
    DataOwner-->|Submit Data|System
    Auditor-->|Review/Calculate|System
    System-->|Checks|RBAC
```

---

## 4. Validation, Measurement Units & Evidence Handling

- **Validation Defaults:** Platform provides sensible defaults for each resource type (e.g., electricity can't be negative, gas units have realistic maxima, and measurement units are strictly enforced). Admins can override as needed [[2]](https://poe.com/citation?message_id=395415503247&citation=2)[[3]](https://poe.com/citation?message_id=395415503247&citation=3).
- **Measurement Unit Handling:**  
    - The unit for each reading item is set in the `validation rules` of ReadingItemDefinition. For example:  
      `{ "unit": "kWh", "min": 0 }` for ‚ÄúElectricity Usage‚Äù, or `{ "unit": "m¬≥", "min": 0 }` for ‚ÄúWater Meter Reading.‚Äù
    - When templates are assigned to specific contexts, these unit settings are inherited. If a context requires a different unit (e.g., reporting water in liters instead of m¬≥), the admin can override the default unit in the template assignment.
    - During data entry, the UI must display the unit and validate input accordingly.
    - In analytics and reporting, the system must aggregate and compare data using these units. If conversion is required (e.g., liters to m¬≥), reporting logic references this unit metadata [[2]](https://poe.com/citation?message_id=395415503247&citation=2)[[3]](https://poe.com/citation?message_id=395415503247&citation=3).
- **Evidence:** Multiple files per reading item allowed; evidence can be linked to a range of time units (e.g., one bill for three months).
- **File Restrictions:** Allow only PDFs/images, with size limits (e.g., 2‚Äì4MB, configurable by admin).

---

## 5. Reporting & Analytics

- Filter, aggregate, and export data by project, branch, module, time period, and **always with reference to the measurement unit** for each field.
- The reporting/analytics layer must use unit metadata from ReadingItemDefinition for correct calculations and visualizations. If data with different units are combined, the system must convert using the `unit` property in validation rules [[3]](https://poe.com/citation?message_id=395415503247&citation=3).
- Auto-flag missing, late, or incomplete submissions for admin/auditor attention.
- Support CSV and PDF report exports.

---

## 6. Audit & Compliance

- **Full audit trail:** All actions (template change, data submission, evidence upload, review) are logged with before/after states and user info.
- **Versioning:** Each ReadingEntry references the exact template version used for submission.

---

## 7. Extensibility

- **Manual & CSV Import:** Support for manual entry and CSV import at launch; external integrations can be added later.
- **Template/Data Import/Export:** Admins can import/export template definitions and reading items, including measurement units as part of validation rules.
- **Future Integration Ready:** API-first design allows easy integration with external data sources or registries.

---

## 8. Visual Summary

```mermaid
flowchart TD
  subgraph Admin
    A[Define Reading Items]
    B[Assign to Modules/Branches]
    C[Set Validation/Evidence Rules]
  end
  subgraph Data Owner
    D[Enter Data/Upload Evidence]
    E[Submit per Time Unit]
  end
  subgraph System
    F[Validate & Store Data]
    G[Generate Alerts/Reports]
    H[Audit Trail]
  end
  subgraph Auditor
    I[Review Submission & Evidence]
    J[Approve/Reject]
  end

  A --> B --> C --> D
  D --> E --> F
  F --> G
  F --> H
  F --> I --> J
```

---

## 9. Clarification: Measurement Units

> **Measurement Unit Handling:**  
> - Each ReadingItemDefinition must specify the expected measurement unit as part of its validation rules (e.g., `"unit": "kWh"`).  
> - This unit is enforced during data entry, displayed in all relevant UI, and referenced in analytics and reporting.  
> - If a context requires a different unit, the admin can override the unit in the template assignment.  
> - Aggregation, analytics, and exports always reference these unit settings. If data from different units need to be combined, proper conversion logic is applied in the reporting layer [[2]](https://poe.com/citation?message_id=395415503247&citation=2)[[3]](https://poe.com/citation?message_id=395415503247&citation=3).

---

## 10. References

- [README.md ‚Äî Overview, Architecture, Extensibility] [[3]](https://poe.com/citation?message_id=395415503247&citation=3)
- [docs/design.md ‚Äî Architecture, RBAC, Auditability] [[2]](https://poe.com/citation?message_id=395415503247&citation=2)
- [docs/workflows.md ‚Äî User Journeys, Use Cases, Diagrams] [[2]](https://poe.com/citation?message_id=395415503247&citation=2)
- [Repository: github.com/ahmedse/carbon](https://github.com/ahmedse/carbon)

---

*This design delivers flexibility, strong compliance, and future scalability as outlined in the Carbon Management Platform‚Äôs vision and roadmap, with robust and clear handling of measurement units across all stages of the data lifecycle* [[2]](https://poe.com/citation?message_id=395415503247&citation=2)[[3]](https://poe.com/citation?message_id=395415503247&citation=3).

---

=== docs/roadmap.md ===
# Roadmap ‚Äî Carbon Management Platform

This roadmap outlines the phased development and long-term vision for the platform.

---

## Phase 1: MVP Foundation (Est. 2-3 weeks)

- Project scaffolding (Django, React, Docker)
- Core data models: User, Role, Project, Cycle, Module, ModuleData
- RBAC (contextual, basic)
- Basic CRUD APIs and authentication
- Frontend: login, context selection, dashboards (skeleton)
- Docker Compose for local dev
- Initial documentation and diagrams

_Milestone: End-to-end data flow for a single tenant, single project, single period._

---

## Phase 2: Core Features (Est. 4-5 weeks)

- Complete CRUD for all entities
- Role-based dashboards (admin, auditor, data owner)
- Data entry forms, CSV import
- Calculation engine (backend)
- Data visualization with Recharts (frontend)
- Bilingual support (EN/AR structure)
- Auditing/logging core actions
- Initial CI/CD pipeline

_Milestone: Platform ready for internal testing with real data._

---

## Phase 3: Productionization (Est. 2-3 weeks)

- Responsive UI polish (desktop/tablet/mobile)
- Automated tests (backend/unit, frontend/e2e)
- Enhanced error handling and logging
- NGINX reverse proxy setup
- Kubernetes manifests (for future scalability)
- Security hardening
- Documentation and user guides

_Milestone: MVP live on staging/production._

---

## Phase 4: Advanced & Scaling (Est. 5+ weeks, parallel tracks)

- Multi-tenancy (tenant field, scoped queries)
- NoSQL (MongoDB) for dynamic module data (see design docs)
- Advanced dashboards (filters, custom analytics)
- Notifications (in-app, email)
- SSO/MFA (optional)
- IoT data integration
- AI/ML analytics (optional)
- Regulatory/compliance features (audit export, versioning)
- API rate limiting, monitoring, Prometheus/Grafana

_Milestone: Enterprise-ready, scalable product._

---

## Visual Timeline

See: `diagrams/feature-roadmap-gantt.mmd`

---

## Long-Term Vision (Suggested)

- **Marketplace for modules/calculations**
- **White-label deployment for orgs**
- **Integrations with external carbon registries**
- **Role-based mobile app**
- **Sustainability scoring and benchmarking**

---

## How to Use This Roadmap

- Revisit and update after each major milestone.
- Use as a reference for sprint planning and onboarding.
- Keep the `feature-roadmap-gantt.mmd` diagram up to date.

---

*For more details on each phase, see the main [design.md](./design.md) and diagrams folder.*

=== docs/workflows.md ===
# Workflows & Use Cases ‚Äî Carbon Management Platform

This document describes key end-to-end workflows, user journeys, and business processes supported by the platform.

---

## 1. User Roles & Typical Journeys

### Admin
- Create projects and cycles/periods
- Assign roles to users by context
- Configure modules
- Manage users, permissions, and settings

### Data Owner
- Enter module data (manual or CSV)
- View assigned modules/periods
- Edit or correct data before deadlines

### Auditor
- Review submitted data
- Trigger calculations
- Generate reports for compliance/accreditation

---

## 2. Common Workflows

### 2.1. Project Setup (Admin)

1. Log in as Admin
2. Create a new project
3. Define reporting cycles/periods
4. Add modules (Water, Electricity, etc.)
5. Assign Data Owners and Auditors

### 2.2. Data Entry (Data Owner)

1. Select assigned context (project, period, module)
2. Enter data via form or upload CSV
3. Submit data for validation

### 2.3. Data Review & Calculation (Auditor)

1. Select project/period/module to audit
2. Review submitted data
3. Trigger calculation
4. View/store calculation result
5. Generate report

### 2.4. Role Management (Admin)

1. View users and their assignments
2. Add/remove role assignments by context

---

## 3. Additional Use Cases

- Multi-tenancy: Org admin manages users for their own org
- Exporting data/reports for external use
- Notification workflows (future): notify users of pending tasks

---

## 4. Workflow Diagrams

_See [diagrams/](./diagrams/) for Mermaid.js workflow diagrams._

---

*Expand each section as real workflows are built!*

