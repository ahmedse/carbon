=== backend/accounts/README.md ===
# accounts

This Django app implements Role-Based Access Control (RBAC) for users, supporting multi-level context (global, project, cycle, module).

## Main Components

- **models.py**: Defines User, Role, Context, and RoleAssignment models.
- **views.py**: API endpoints for managing roles, contexts, assignments, authentication, and retrieving user roles.
- **serializers.py**: DRF serializers for all models.
- **permissions.py**: Custom DRF permission for RBAC enforcement.
- **utils.py**: Helper for hierarchical permission checking.
- **admin.py**: Admin site integration for all models.
- **urls.py**: API routing for all endpoints.
- **apps.py**: App configuration.

## API Overview

- `roles/`: CRUD for roles
- `contexts/`: CRUD for contexts
- `role-assignments/`: CRUD for assignments
- `token/`, `token/refresh/`: JWT auth
- `my-roles/`: Returns roles and their contexts for the authenticated user

## How to Extend

- Add new permissions to roles via the `permissions` JSON field.
- Extend contexts to fit your projectâ€™s structure.
- Override `user_has_permission` for customized rules.

## Test

Add your tests in `accounts/tests.py`.

---

**Location:** `accounts/` (inside your Django project)

=== backend/accounts/__init__.py ===


=== backend/accounts/admin.py ===
# File: accounts/admin.py
# Purpose: Admin configuration for User, Role, Context, and RoleAssignment models.

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from .models import User, Role, Context, RoleAssignment

@admin.register(User)
class UserAdmin(BaseUserAdmin):
    """
    Custom admin interface for the User model.
    """
    pass

@admin.register(Role)
class RoleAdmin(admin.ModelAdmin):
    """
    Admin interface for managing roles.
    """
    list_display = ('name', 'description')

@admin.register(Context)
class ContextAdmin(admin.ModelAdmin):
    """
    Admin interface for managing contexts.
    """
    list_display = ('type', 'project', 'cycle', 'module')
    list_filter = ('type', 'project', 'cycle', 'module')

@admin.register(RoleAssignment)
class RoleAssignmentAdmin(admin.ModelAdmin):
    """
    Admin interface for managing role assignments.
    """
    list_display = ('user', 'role', 'context')
    list_filter = ('role', 'context__type', 'context__project', 'context__cycle', 'context__module')

=== backend/accounts/apps.py ===
# File: accounts/apps.py
# Purpose: Django app configuration for the accounts app.

from django.apps import AppConfig

class AccountsConfig(AppConfig):
    """
    AppConfig for the accounts application.
    """
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

=== backend/accounts/models.py ===
# File: accounts/models.py
# Purpose: Defines database models for the RBAC (Role-Based Access Control) system.
#
# Models:
# - User: Custom user model extending AbstractUser.
# - Role: Represents a named role with a set of permissions.
# - Context: Represents a scope (global, project, cycle, module) for RBAC assignments.
# - RoleAssignment: Assignment of a role to a user within a context.

from django.db import models
from django.contrib.auth.models import AbstractUser

class User(AbstractUser):
    """
    Custom user model for the application.
    Role-based access control is managed via RoleAssignment.
    """
    pass

class Role(models.Model):
    """
    Represents a role with a name, optional description, and a list of permissions.
    """
    name = models.CharField(max_length=50, unique=True)
    description = models.TextField(blank=True)
    permissions = models.JSONField(default=list)  # e.g. ["add_data", "view_dashboard"]

    def __str__(self):
        """Return the string representation of the role."""
        return self.name

class Context(models.Model):
    """
    Represents a context for RBAC assignments, such as global, project, cycle, or module.
    """
    CONTEXT_TYPES = [
        ('global', 'Global'),
        ('project', 'Project'),
        ('cycle', 'Cycle'),
        ('module', 'Module'),
    ]
    type = models.CharField(max_length=10, choices=CONTEXT_TYPES)
    project = models.ForeignKey('core.Project', null=True, blank=True, on_delete=models.CASCADE)
    cycle = models.ForeignKey('core.Cycle', null=True, blank=True, on_delete=models.CASCADE)
    module = models.ForeignKey('core.Module', null=True, blank=True, on_delete=models.CASCADE)

    def __str__(self):
        """
        Return a detailed string representation of the context, including related objects.
        """
        parts = [self.type]
        if self.project: parts.append(f"Project:{self.project}")
        if self.cycle: parts.append(f"Cycle:{self.cycle}")
        if self.module: parts.append(f"Module:{self.module}")
        return ' / '.join(parts)

class RoleAssignment(models.Model):
    """
    Associates a user with a role within a specific context.
    Ensures unique assignment per user, role, and context.
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='role_assignments')
    role = models.ForeignKey(Role, on_delete=models.CASCADE)
    context = models.ForeignKey(Context, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('user', 'role', 'context')

    def __str__(self):
        """Return a readable description of the role assignment."""
        return f"{self.user} as {self.role} in {self.context}"

=== backend/accounts/permissions.py ===
# File: accounts/permissions.py
# Purpose: Custom permission class for RBAC enforcement in DRF views.

from rest_framework.permissions import BasePermission
from .utils import user_has_permission
from .models import Context

class HasRBACPermission(BasePermission):
    """
    Checks if the user has a required RBAC permission for a given context.
    The view must set 'required_permission' and implement 'get_context(request)'.
    """
    def has_permission(self, request, view):
        """
        Returns True if the user has the required permission in the context.
        """
        if not request.user.is_authenticated:
            return False

        required_permission = getattr(view, 'required_permission', None)
        if not required_permission:
            return True  # No RBAC specified

        context = view.get_context(request)
        if not context:
            return False
        return user_has_permission(request.user, required_permission, context)

=== backend/accounts/serializers.py ===
# File: accounts/serializers.py
# Purpose: DRF serializers for the RBAC models.

from rest_framework import serializers
from .models import Role, Context, RoleAssignment

class RoleSerializer(serializers.ModelSerializer):
    """
    Serializer for the Role model.
    """
    class Meta:
        model = Role
        fields = '__all__'

class ContextSerializer(serializers.ModelSerializer):
    """
    Serializer for the Context model.
    """
    class Meta:
        model = Context
        fields = '__all__'

class RoleAssignmentSerializer(serializers.ModelSerializer):
    """
    Serializer for the RoleAssignment model.
    """
    class Meta:
        model = RoleAssignment
        fields = '__all__'

=== backend/accounts/tests.py ===
# File: accounts/tests.py
# Purpose: Place to add automated tests for the accounts app.

from django.test import TestCase

# Create your tests here.

=== backend/accounts/urls.py ===
# File: accounts/urls.py
# Purpose: URL routing for RBAC API endpoints.

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import RoleViewSet, ContextViewSet, RoleAssignmentViewSet, MyTokenObtainPairView
from rest_framework_simplejwt.views import TokenRefreshView
from .views import my_roles

router = DefaultRouter()
router.register(r'roles', RoleViewSet)
router.register(r'contexts', ContextViewSet)
router.register(r'role-assignments', RoleAssignmentViewSet)

urlpatterns = [
    path('token/', MyTokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('', include(router.urls)),
    path('my-roles/', my_roles),
]

=== backend/accounts/utils.py ===
# File: accounts/utils.py
# Purpose: Utility functions for RBAC permission checks.

def user_has_permission(user, permission, context):
    """
    Determines whether the user has the specified permission in the provided context.
    Checks the most specific context first, then walks up the hierarchy:
    module -> cycle -> project -> global.

    Args:
        user: The user object.
        permission: The permission string to check (e.g., "add_data").
        context: The context object representing the scope.

    Returns:
        bool: True if the user has the permission, otherwise False.
    """
    qs = user.role_assignments.filter(role__permissions__contains=[permission])

    # Check exact context
    if qs.filter(context=context).exists():
        return True

    # Check parent contexts if available
    if context.type == 'module':
        # Check cycle-level
        if qs.filter(context__type='cycle', context__cycle=context.cycle).exists():
            return True
        # Check project-level
        if qs.filter(context__type='project', context__project=context.project).exists():
            return True
    if context.type in ['module', 'cycle']:
        # Check global-level
        if qs.filter(context__type='global').exists():
            return True
    return False

=== backend/accounts/views.py ===
# File: accounts/views.py
# Purpose: API views for RBAC operations (roles, contexts, assignments, tokens, user roles).

from rest_framework import viewsets
from .models import Role, Context, RoleAssignment
from .serializers import RoleSerializer, ContextSerializer, RoleAssignmentSerializer
from rest_framework_simplejwt.views import TokenObtainPairView
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer

class RoleViewSet(viewsets.ModelViewSet):
    """
    API endpoint for listing, creating, retrieving, updating and deleting roles.
    """
    queryset = Role.objects.all()
    serializer_class = RoleSerializer

class ContextViewSet(viewsets.ModelViewSet):
    """
    API endpoint for managing contexts.
    """
    queryset = Context.objects.all()
    serializer_class = ContextSerializer

class RoleAssignmentViewSet(viewsets.ModelViewSet):
    """
    API endpoint for managing role assignments.
    """
    queryset = RoleAssignment.objects.all()
    serializer_class = RoleAssignmentSerializer

class MyTokenObtainPairSerializer(TokenObtainPairSerializer):
    """
    Customizes the JWT token to include extra user information.
    """
    @classmethod
    def get_token(cls, user):
        """
        Generate a token for the user, including the username.
        """
        token = super().get_token(user)
        token['username'] = user.username
        # Optionally add role assignments or permissions summary
        # token['roles'] = list(user.role_assignments.values_list('role__name', flat=True))
        return token

class MyTokenObtainPairView(TokenObtainPairView):
    """
    API endpoint for obtaining JWT tokens with custom claims.
    """
    serializer_class = MyTokenObtainPairSerializer

    def post(self, request, *args, **kwargs):
        """
        Logs token request data and returns token response.
        """
        import logging
        logger = logging.getLogger('django')
        logger.debug(f"Token request data: {request.data}")
        return super().post(request, *args, **kwargs)

from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def my_roles(request):
    """
    Returns all roles assigned to the authenticated user, including context information.
    """
    user = request.user
    assignments = user.role_assignments.select_related('role', 'context')
    roles = [
        {
            "role": a.role.name,
            "context_type": a.context.type,
            "project": getattr(a.context.project, 'name', None),
            "cycle": getattr(a.context.cycle, 'name', None),
            "module": getattr(a.context.module, 'name', None),
            "permissions": a.role.permissions,
        }
        for a in assignments
    ]
    return Response({"roles": roles})

